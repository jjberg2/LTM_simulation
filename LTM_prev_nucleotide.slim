initialize() {

	initializeSLiMOptions(nucleotideBased=T);
	liabilitySize = liaSize;
	defineConstant('L', liabilitySize);
   defineConstant('RHO',rho_input);


	// transformed parameters
   maxG = 2 * liabilitySize;
   threshold = RHO * maxG;
	defineConstant('THR',threshold);

	// you can change this, when THR smaller than this number, starting point is 0; otherwise, it is THR - THR_MINUS
	defineConstant('THR_START', 2000); 
	defineConstant('THR_MINUS', 500); 
	if (THR <= THR_START) {
		// if large effect, start at point 0, set all ancestral alleles to be protective 
	   startingPoint = 0;
	   initializeAncestralNucleotides(paste0(rep("A", L))); // Ancestral allele start with protective 
	} 
	else {
		// if not, start at threshold point - 2000, set corresponding number of alleles to be protective and liability increasing 
	   startingPoint = 0;  
	   initial_sequence = randomNucleotides(L, c(L-asInteger(L*RHO)+ asInteger(THR_MINUS), 0, asInteger(L*RHO)- asInteger(THR_MINUS), 0));
	   defineConstant('ANC', initial_sequence);
	   initializeAncestralNucleotides(initial_sequence);
	}	
	
	// set parameters
	perSiteMutRate = mu;
	perSiteRecRate = 100 * perSiteMutRate; // set the perSiteRecRate equal to 100 * perSiteMutRate 
	popSize = p;
	
	envSD = e;
	fitnessCost = f;	
		
	// define constants
	defineConstant('MU',perSiteMutRate);
	defineConstant('REC',perSiteRecRate);
	defineConstant('N',popSize);
	defineConstant('START',startingPoint);
	defineConstant('FITCOST',fitnessCost);
	defineConstant('ENV_SIGMA',envSD);
	defineConstant('SAMPLE_INT', sampleInt);
	defineConstant('CYCLE', cyc);
	defineConstant('REP',rep);
	defineConstant('TOYRUN',toyRun);

	// output files
	defineConstant('MEANOUT',meanOut);
	defineConstant('H2OUT',h2Out);
	defineConstant('PREVOUT',prevOut);
	defineConstant('GENVAROUT',genVarOut);
	defineConstant('NSEGOUT',nSegOut);
	defineConstant('DELTAR',deltaR);

	// liability mutations
	LiaMuts = initializeMutationTypeNuc("m1", 0.5, 'f', 0);
	LiaMuts.convertToSubstitution=T;
	
	mutationMatrix = matrix(c(0,0,MU,0, 0,0,0,0, MU,0,0,0, 0,0,0,0), nrow=4, ncol=4);
	initializeGenomicElementType('g1', m1, 1.0, mutationMatrix);
	
	initializeGenomicElement(g1, 0, L-1);
	// set recombinationrate  
	initializeRecombinationRate(REC);
}


fitness(NULL){
	return (1.0 - FITCOST * asFloat(individual.tagF > THR)) * relFitness;
}


1 {
	sim.addSubpop('p1', N);
	sim.setValue("cycles", 0);
	if (THR <= THR_START) {
		sim.setValue("fixedPos", NULL);  // record position fixed for risk allele
	}
        
	// small effect size, count how many are fixed at risk allele   
	else {
   	temp=c();
     	for (i in c(0: (nchar(ANC)-1))){
      	if (substr(ANC, i,i)=="G") temp = c(temp, i);
        		sim.setValue("fixedPos", temp);
       	}
     		// print(length(sim.getValue("fixedPos")));
 	}
   sim.setValue("Nfixed", 0);   // record total number of fixed allele
   
}

2: early() {
	if (
		(sim.generation > 10*N & sim.generation % SAMPLE_INT ==0 & sim.getValue("cycles") < CYCLE & TOYRUN == 0) |
		(sim.generation < 10 & TOYRUN == 1)	
	){
		genLi = sim.subpopulations.individuals.tagF;
		risk = rep(0.0, length(genLi));	
			
		for(i in c(0: (length(genLi)-1))){
			risk[i] = 1 - pnorm(THR, genLi[i], ENV_SIGMA);
		}

  		// disease = asFloat(sim.subpopulations.individuals.tagF > THR);
   	// disease = disease/mean(disease);
   	mutTypes = sim.mutationTypes;
   	all_lia = sim.mutationsOfType(mutTypes[0]);
		riskEffect = rep(0.0, length(all_lia));
		for (i in c(0: (length(all_lia)-1))){
      	x = asInteger(p1.individuals.genome1.containsMutations(all_lia[i])) + asInteger(p1.individuals.genome2.containsMutations(all_lia[i]));
      	if (all_lia[i].nucleotide == "A") {
      		x = 2-x;
      	}
    		num = sum((x-mean(x))*(risk - mean(risk)));
   		denom = sum( (x-mean(x))^2 );
			riskEffect[i] = num/denom ;
		}
		//sim.setValue("meanRiskEffect", );	
		writeFile(DELTAR, paste(mean(riskEffect), sep=","), append=T);
	}
}	

1:5000000 late() {
	thisGen=sim.generation;
	inds = sim.subpopulations.individuals;
	muts=sim.mutations;
	mutTypes=sim.mutationTypes;
	
	// count up substitutions
	subs=sim.substitutions.nucleotide;
	fixedGenLi = 2 * length(sim.getValue("fixedPos"));
	if (length(subs)!= sim.getValue("Nfixed")){
	   for (newsubs in c((sim.getValue("Nfixed") +1): length(subs))){
	   	sim.setValue("Nfixed", sim.getValue("Nfixed") + 1);

	   	// the new substitution was a plus fix
	   	if (subs[newsubs-1] == "G"){
	      	   plus_pos = sim.substitutions[newsubs-1].position;
	      	   sim.setValue("fixedPos", c(sim.getValue("fixedPos"), plus_pos));
	      	   fixedGenLi = fixedGenLi + 2 ;
	   	   }

	   	// the new substitution was a minus fix
	   	if (subs[newsubs-1] == "A"){
	      	   minus_pos = sim.substitutions[newsubs-1].position;
	      	   if (length(sim.getValue("fixedPos")) !=0){
	      	      if (sum(minus_pos == sim.getValue("fixedPos")) !=0){
		      	 
			 // When it is previously a fixed risk allel, fixed genetic liability -2  and take it out of the fixedPos list 
		      	 fixedGenLi = fixedGenLi - 2;
		    	 old_fixedPos = sim.getValue("fixedPos");
		    	 new_fixedPos = old_fixedPos[which(old_fixedPos !=minus_pos)];
		    	 sim.setValue("fixedPos", new_fixedPos);
		      }
	           }
	        }
	   }	
	}

	Ninds = length(inds);

	// calculate the liability for the segregating sites 
	segGenLi = rep(0, Ninds);
	for (i in c(0:(Ninds-1))){
		ind_mut = sim.subpopulations.individuals[i].genomes.mutations.nucleotide;
		segGenLi[i] = sum(ind_mut =="G") - sum(ind_mut =="A");
	}

	// calculate components of genetic liability 
	genLi=START+fixedGenLi+segGenLi;

	liabilities = genLi + rnorm(N, 0.0, ENV_SIGMA);	
	
	// things to output
	mean=mean(genLi);
	genVar=var(genLi);
	phenVar=var(liabilities);
	
	h2=genVar/phenVar;
	prev=sum(liabilities >THR)/length(liabilities );
	nSeg = sum(sim.mutations.nucleotide=="A") + sum(sim.mutations.nucleotide=="G");

	// pass genetic liabilities to next code block
	inds.tagF = genLi;

	if (
		(sim.generation > 10*N & sim.generation % SAMPLE_INT ==0 & sim.getValue("cycles") < CYCLE & TOYRUN == 0) |
		(sim.generation < 10 & TOYRUN == 1)
	)
	{
		writeFile(MEANOUT, paste(mean, sep=","), append=T);
		writeFile(PREVOUT, paste(prev, sep=","), append=T);
		writeFile(H2OUT, paste(h2, sep=","), append=T);
		writeFile(GENVAROUT, paste(genVar, sep=","), append=T);
		writeFile(NSEGOUT, paste(nSeg, sep=","), append=T);
		sim.setValue("cycles", sim.getValue("cycles") +1);
	}
	else if (
		(sim.getValue("cycles") >= CYCLE) |
		(sim.generation >= 10 & TOYRUN == 1)
	)
	{
		sim.simulationFinished();
	}
}

