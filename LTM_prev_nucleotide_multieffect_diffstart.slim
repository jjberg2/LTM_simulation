initialize() {
	
	initializeSLiMOptions(nucleotideBased=T);
	defineConstant('Ls', asInteger(liaSmall));   // input liaSmall
	defineConstant('Ll', asInteger(liaLarge));   // input liaLarge
	defineConstant('betaS', aS);  //input aS
	defineConstant('betaL', aL);  //input aL
	defineConstant('rhoS', floor(rhos * 10000)/10000);
	
	
	
	// set parameters
	perSiteMutRate = mu;  // input mu 
	perSiteRecRate = 100 * perSiteMutRate; // set the perSiteRecRate equal to 30 * perSiteMutRate 
	popSize = p;   // input p 
	
//	rho = rhot;   //input rho total 
	envSD = e;   // input e 
	fitnessCost = f;    // input f
//	prefix=pre;	// output file prefix
	
	L = Ls + Ll;
	maxG = 2 * (Ls * betaS + Ll * betaL);
	threshold = thr;
	offset = envSD;
	startingPoint = 2 * Ls * rhoS - offset ;
	
	// A and C are protective states for small effect and large effect 	
	defineConstant('G_INIT',asInteger(startingPoint/2));
	defineConstant('A_INIT',Ls - G_INIT);
	defineConstant('C_INIT',Ll);
	defineConstant('T_INIT',0);
	anc_seq= sample(c(rep('A', A_INIT), rep('C', asInteger(Ll)), rep('G', G_INIT)), Ls + Ll, replace = F);
	initializeAncestralNucleotides(anc_seq); // Ancestral allele start with protective 
	defineConstant('ANC',anc_seq);
	
	
	// define constants
	defineConstant('MU',perSiteMutRate);
	defineConstant('REC',perSiteRecRate);
	defineConstant('N',popSize);
//	defineConstant('RHO',rho);
	defineConstant('THR',threshold);
	defineConstant('START',startingPoint);
	defineConstant('FITCOST',fitnessCost);
	defineConstant('ENV_SIGMA',envSD);
	defineConstant('SAMPLE_INT', sampleInt);
	defineConstant('CYCLE', cyc);
	defineConstant('REP',rep);
	defineConstant('TOYRUN',toyRun);
	
	
	// output files
	defineConstant('MEAN',mean);
	defineConstant('H2OUT',h2Out);
	defineConstant('H2SOUT',h2sOut);
	defineConstant('H2LOUT',h2lOut);
	defineConstant('PREVOUT',prevOut);
	defineConstant('GENVAROUT',genVar);
	
	
	// liability mutations
	LiaMuts = initializeMutationTypeNuc("m1", 0.5, 'f', 0);
	LiaMuts.convertToSubstitution=T;
	
	// G and T are risk states for small effect and large effect 
	mutationMatrix = matrix(c(0,0, MU,0, 0,0,0,MU, MU,0,0,0, 0,MU,0,0), nrow=4, ncol=4);
	initializeGenomicElementType('g1', m1, 1.0, mutationMatrix);
	
	initializeGenomicElement(g1, 0, L-1);
	
	// set recombinationrate  
	initializeRecombinationRate(REC);
}


fitness(NULL){
	return (1.0 - FITCOST * asFloat(individual.tagF > THR)) * relFitness;
}


1 {
	sim.addSubpop('p1', N);
	sim.setValue("cycles", 0);
	sim.setValue("SfixedPos", which(ANC=="G"));
	// record position fixed for risk allele
	sim.setValue("LfixedPos", NULL);  // record position fixed for risk allele
	sim.setValue("Nfixed", 0);   // record total number of fixed allele 
}


1:50000000 late() {
	thisGen=sim.generation;
	inds = sim.subpopulations.individuals;
	muts=sim.mutations;
	mutTypes=sim.mutationTypes;
	
	// count up substitutions
	subs = sim.substitutions.nucleotide;
	fixedSmallGenLi = 2 * betaS * length(sim.getValue('SfixedPos'));
	fixedLargeGenLi = 2 * betaL * length(sim.getValue('LfixedPos'));
	fixedGenLi = fixedSmallGenLi + fixedLargeGenLi;
	
	if (length(subs)!= sim.getValue('Nfixed')){
		// slimgui.pauseExecution();
		for (newsubs in c((sim.getValue('Nfixed') + 1): length(subs))){
			sim.setValue('Nfixed', sim.getValue('Nfixed') + 1);
			
			// the new substitution was a plus fix 
			if ((subs[newsubs - 1] == 'T')){
				plus_pos = sim.substitutions[newsubs - 1].position;
				sim.setValue('LfixedPos', c(sim.getValue('LfixedPos'), plus_pos));
				fixedLargeGenLi = fixedLargeGenLi  + 2 * betaL;
				fixedGenLi = fixedGenLi + 2 * betaL;
			}
			
			// the new substitution was a minus fix
			if ((subs[newsubs-1] == "C")){
				minus_pos = sim.substitutions[newsubs-1].position;
				fixedLargeGenLi = fixedLargeGenLi - 2*betaL;
				fixedGenLi = fixedGenLi - 2 * betaL;
				old_fixedPos = sim.getValue("LfixedPos");
				new_fixedPos = old_fixedPos[which(old_fixedPos !=minus_pos)];
				sim.setValue("LfixedPos", new_fixedPos);
				// double check it is from a previously fixed large effect size 
				if (length(sim.getValue("LfixedPos")) ==0){
					if (sum(minus_pos == sim.getValue("LfixedPos")) ==0){
						print("The substitution did not happen from a previously fixed position", error=T);
					}
				}
			}
			
			if (subs[newsubs - 1] == 'G'){
				plus_pos = sim.substitutions[newsubs - 1].position;
				sim.setValue('SfixedPos', c(sim.getValue('SfixedPos'), plus_pos));
				fixedSmallGenLi = fixedSmallGenLi  + 2 * betaS;
				fixedGenLi = fixedGenLi + 2 * betaS;
			}
			
			// the new substitution was a minus fix
			if ((subs[newsubs-1] == "A")){
				minus_pos = sim.substitutions[newsubs-1].position;
				fixedSmallGenLi = fixedSmallGenLi - 2*betaL;
				fixedGenLi = fixedGenLi - 2 * betaL;
				old_fixedPos = sim.getValue("SfixedPos");
				new_fixedPos = old_fixedPos[which(old_fixedPos !=minus_pos)];
				sim.setValue("SfixedPos", new_fixedPos);
				// double check it is from a previously fixed smalleffect size 
				if (length(sim.getValue("SfixedPos")) ==0){
					if (sum(minus_pos == sim.getValue("SfixedPos")) ==0){
						print("The substitution did not happen from a previously fixed position", error=T);
					}
				}
			}
		
		}
	}
	
	// calculate the liability for the segregating sites 
	Ninds = length(inds);
	segGenLi = rep(0.0, Ninds);
	largesegGenLi = rep(0.0, Ninds);
	smallsegGenLi = rep(0.0, Ninds);
	for (i in c(0:(Ninds-1))){
		ind_mut = sim.subpopulations.individuals[i].genomes.mutations.nucleotide;
		smallsegGenLi[i] = sum(ind_mut =="G") * betaS - sum(ind_mut =="A") * betaS;
		largesegGenLi[i] = sum(ind_mut =="T") *betaL - sum(ind_mut =="C") * betaL;
		segGenLi[i] = smallsegGenLi[i] + largesegGenLi[i];
	}
	
	// calculate components of genetic liability 
	genLi=fixedGenLi+segGenLi;
	inds.tagF = genLi + rnorm(N, 0.0, ENV_SIGMA);
	
	mean=mean(genLi);
	genVar=var(genLi);
	phenVar=var(inds.tagF);
	h2=genVar/phenVar;
	genVarSmall = var(fixedSmallGenLi + smallsegGenLi);
	h2s = genVarSmall/phenVar;
	genVarLarge = var(fixedLargeGenLi + largesegGenLi);
	h2l = genVarLarge/ phenVar;
	prev=sum(inds.tagF>THR)/length(inds.tagF);
	
	
	
	
	if (sim.generation % 5000 ==0){print(sim.generation);}
	if (sim.generation < 10 & TOYRUN == 1)
	{
		writeFile(MEANOUT, append=T);
		writeFile(PREVOUT, append=T);
		writeFile(H2OUT, append=T);
		writeFile(H2SOUT, append=T);
		writeFile(H2LOUT, append=T);
		writeFile(GENVAROUT, append=T);
	}
	else if (sim.generation < 10 & TOYRUN == 1)
	{
		sim.simulationFinished();
	}
	
	if (sim.generation > 10*N & sim.generation % SAMPLE_INT ==0 & sim.getValue("cycles") < CYCLE & TOYRUN == 0)
	{
		writeFile(MEANOUT, append=T);
		writeFile(PREVOUT, append=T);
		writeFile(H2OUT, append=T);
		writeFile(H2SOUT, append=T);
		writeFile(H2LOUT, append=T);
		writeFile(GENVAROUT, append=T);
		sim.setValue("cycles", sim.getValue("cycles") +1);
	}
	else if (sim.getValue("cycles") >= CYCLE)
	{
		sim.simulationFinished();
	}
}

