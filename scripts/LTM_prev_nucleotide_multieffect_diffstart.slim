initialize() {
	
	initializeSLiMOptions(nucleotideBased=T);
	if(exists('slimgui')){
		defineConstant('Ls', asInteger(9517019));   // input liaSmall
		defineConstant('Ll', asInteger(11795));   // input liaLarge
		defineConstant('betaS', 1);  //input aS
		defineConstant('betaL',  40.94882);  //input aL
		defineConstant('rhoS', floor(0.3152248 * Ls)/Ls);
		
		// set parameters
		perSiteMutRate = 10^-8;  // input mu 
		perSiteRecRate = 100 * perSiteMutRate; // set the perSiteRecRate equal to 30 * perSiteMutRate 
		popSize = 500;   // input p 
		
		thr = 6000001.0;
		envSD =   13.80363;   // input e 
		fitnessCost = 0.1;    // input f
		sampleInt = 50;
		cyc = 200;
		rep = 1;
		toyRun = 0;
	} else {
		defineConstant('Ls', asInteger(liaSmall));   // input liaSmall
		defineConstant('Ll', asInteger(liaLarge));   // input liaLarge
		defineConstant('betaS', aS);  //input aS
		defineConstant('betaL', aL);  //input aL
		defineConstant('rhoS', floor(rhos * Ls)/Ls);
		
		// set parameters
		perSiteMutRate = mu;  // input mu 
		perSiteRecRate = 100 * perSiteMutRate; // set the perSiteRecRate equal to 30 * perSiteMutRate 
		popSize = p;   // input p 
		
		//	rho = rhot;   //input rho total 
		envSD = e;   // input e 
		fitnessCost = f;    // input f
		
		
		// output files
		defineConstant('FIXEDSMALLOUT',fixedSmallOut);
		defineConstant('FIXEDLARGEOUT',fixedLargeOut);
		defineConstant('MEANSMALLOUT',meanSmallOut);
		defineConstant('MEANLARGEOUT',meanLargeOut);
		defineConstant('MEANOUT',meanOut);
		defineConstant('H2OUT',h2Out);
		defineConstant('H2SOUT',h2sOut);
		defineConstant('H2LOUT',h2lOut);
		defineConstant('PREVOUT',prevOut);
		defineConstant('GENVAROUT',genVarOut);
		defineConstant('NSEGSMALLOUT',nSegSmallOut);
		defineConstant('NSEGLARGEOUT',nSegLargeOut);
		defineConstant('DELTARSMALLOUT',deltaRSmallOut);
		defineConstant('DELTARLARGEOUT',deltaRLargeOut);
	}
	
	
	L = Ls + Ll;
	maxG = 2 * (Ls * betaS + Ll * betaL);
	threshold = thr;
	offset = envSD;
	startingPoint = 2 * Ls * rhoS - offset ;
	
	// A and C are protective states for small effect and large effect, respectively
	// G and T are risk states for small effect and large effect, respectively
	defineConstant('G_INIT',asInteger(startingPoint/2));
	defineConstant('A_INIT',Ls - G_INIT);
	defineConstant('C_INIT',Ll);
	defineConstant('T_INIT',0);
	anc_seq= sample(c(rep('A', A_INIT), rep('C', asInteger(Ll)), rep('G', G_INIT)), Ls + Ll, replace = F);
	initializeAncestralNucleotides(anc_seq); // Ancestral allele start with protective 
	defineConstant('ANC',anc_seq);
	
	// define constants
	defineConstant('MU',perSiteMutRate);
	defineConstant('REC',perSiteRecRate);
	defineConstant('N',popSize);
	//	defineConstant('RHO',rho);
	defineConstant('THR',threshold);
	defineConstant('START',startingPoint);
	defineConstant('FITCOST',fitnessCost);
	defineConstant('ENV_SIGMA',envSD);
	defineConstant('SAMPLE_INT', sampleInt);
	defineConstant('CYCLE', cyc);
	defineConstant('REP',rep);
	defineConstant('TOYRUN',toyRun);
	
	
	
	
	// liability mutations
	LiaMuts = initializeMutationTypeNuc("m1", 0.5, 'f', 0);
	LiaMuts.convertToSubstitution=T;
	
	// A and C are protective states for small effect and large effect 		
	// G and T are risk states for small effect and large effect 
	mutationMatrix = matrix(c(0,0, MU,0, 0,0,0,MU, MU,0,0,0, 0,MU,0,0), nrow=4, ncol=4);
	initializeGenomicElementType('g1', m1, 1.0, mutationMatrix);
	
	initializeGenomicElement(g1, 0, L-1);
	
	// set recombinationrate  
	initializeRecombinationRate(REC);
}


fitness(NULL){
	return (1.0 - FITCOST * asFloat(individual.tagF > THR)) * relFitness;
}


1 early() {
	sim.addSubpop('p1', N);
	sim.setValue("cycles", 0);
	temp=which(ANC=="G");
	sim.setValue("SfixedPos", temp);
	// record position fixed for risk allele
	sim.setValue("LfixedPos", NULL);  // record position fixed for risk allele
	sim.setValue("Nfixed", 0);   // record total number of fixed allele 
}


1:50000000 late() {
	
	thisGen=sim.generation;
	print(thisGen);
	inds = sim.subpopulations.individuals;
	muts=sim.mutations;
	mutTypes=sim.mutationTypes;
	
	// count up substitutions
	subs = sim.substitutions.nucleotide;
	//	print(c(sum(subs == 'G'), sum(subs == 'A'), sum(subs == 'C'), sum(subs == 'T')));
	//	fixedSmallGenLi = 2 * betaS * (sum(subs == 'G') - sum(subs == 'A'));
	fixedSmallGenLi = 2 * betaS * length(sim.getValue('SfixedPos'));
	//	fixedLargeGenLi = 2 * betaS * (sum(subs == 'T') - sum(subs == 'C'));
	fixedLargeGenLi = 2 * betaL * length(sim.getValue('LfixedPos'));
	fixedGenLi = fixedSmallGenLi + fixedLargeGenLi;
	
	if (length(subs)!= sim.getValue('Nfixed')){
		for (newsubs in c((sim.getValue('Nfixed') + 1): length(subs))){
			sim.setValue('Nfixed', sim.getValue('Nfixed') + 1);
			
			// the new substitution was a large effect plus fix 
			if ((subs[newsubs - 1] == 'T')){
				plus_pos = sim.substitutions[newsubs - 1].position;
				sim.setValue('LfixedPos', c(sim.getValue('LfixedPos'), plus_pos));
				fixedLargeGenLi = fixedLargeGenLi  + 2 * betaL;
				fixedGenLi = fixedGenLi + 2 * betaL;
			}
			
			// the new substitution was a large effect minus fix
			if ((subs[newsubs-1] == "C")){
				minus_pos = sim.substitutions[newsubs-1].position;
				fixedLargeGenLi = fixedLargeGenLi - 2*betaL;
				fixedGenLi = fixedGenLi - 2 * betaL;
				old_fixedPos = sim.getValue("LfixedPos");
				new_fixedPos = old_fixedPos[which(old_fixedPos !=minus_pos)];
				sim.setValue("LfixedPos", new_fixedPos);
			}
			
			// the new substitution was a small effect plus fix 			
			if (subs[newsubs - 1] == 'G'){
				plus_pos = sim.substitutions[newsubs - 1].position;
				sim.setValue('SfixedPos', c(sim.getValue('SfixedPos'), plus_pos));
				fixedSmallGenLi = fixedSmallGenLi  + 2 * betaS;
				fixedGenLi = fixedGenLi + 2 * betaS;
			}
			
			// the new substitution was a small effect minus fix 			
			if ((subs[newsubs-1] == "A")){
				minus_pos = sim.substitutions[newsubs-1].position;
				fixedSmallGenLi = fixedSmallGenLi - 2*betaL;
				fixedGenLi = fixedGenLi - 2 * betaL;
				old_fixedPos = sim.getValue("SfixedPos");
				new_fixedPos = old_fixedPos[which(old_fixedPos !=minus_pos)];
				sim.setValue("SfixedPos", new_fixedPos);
			}
		
		}
	}
	
	
	
	
	// remove back mutations from the mutations list, but leave the nucleotide change
	// this is needed in order to maintain the right finite sites accounting given slim's 
	// mutation model
	muts = sim.mutations;
	new_muts = muts[muts.originGeneration == sim.generation];
	back_muts = NULL;
	for (mut in new_muts) {
		pos = mut.position;
		if (mut.nucleotide == sim.chromosome.ancestralNucleotides(pos, pos)){
			back_muts = c(back_muts, mut);
		}
	}
	if (size(back_muts))
		sim.subpopulations.genomes.removeMutations(back_muts);
	
	
	// calculate the liability for the segregating sites 
	Ninds = length(inds);
	segGenLi = rep(0.0, Ninds);
	segLargeGenLi = rep(0.0, Ninds);
	segSmallGenLi = rep(0.0, Ninds);
	for (i in c(0:(Ninds-1))){
		ind_mut = sim.subpopulations.individuals[i].genomes.mutations.nucleotide;
		segSmallGenLi[i] = sum(ind_mut =="G") * betaS - sum(ind_mut =="A") * betaS;
		segLargeGenLi[i] = sum(ind_mut =="T") * betaL - sum(ind_mut =="C") * betaL;
	}
	
	
	// calculate components of genetic liability 
	segGenLi = segSmallGenLi + segLargeGenLi;
	smallGenLi = fixedSmallGenLi + segSmallGenLi;
	largeGenLi = fixedLargeGenLi + segLargeGenLi;
	genLi=fixedGenLi+segGenLi;
	liabilities = genLi + rnorm(N, 0.0, ENV_SIGMA);
	inds.tagF = liabilities;
	
	if (
		!(exists('slimgui')) &
		(
		(sim.generation > 10*N & sim.generation % SAMPLE_INT ==0 & sim.getValue("cycles") < CYCLE & TOYRUN == 0) |
		(sim.generation > 1 & sim.generation < 10 & TOYRUN == 1)
		)
		)
	{
		// output
		
		// compute individuals' genetic risk		
		risk = rep(0.0, length(genLi));
		for(i in c(0: (length(genLi)-1))){
			if(ENV_SIGMA != 0){
				risk[i] = 1 - pnorm(THR, genLi[i], ENV_SIGMA);
			} else {
				risk[i] = asFloat(liabilities[i] >= THR);
			}
		}
		
		// need to account for any back mutations that were removed earlier
		// as by default they aren't remove from the mutation list until the end of 
		// the generation 	
		//		nucs=sim.mutations.nucleotide	
		tmp_muts = sim.mutations;
		if(length(back_muts)==0){
			muts2 = tmp_muts;
		} else {
			muts2 = tmp_muts[match(tmp_muts,back_muts)==-1];
		}
		nucs2 = muts2.nucleotide;
		small_muts = muts2[nucs2=="A" | nucs2=="G"];
		large_muts = muts2[nucs2=="C" | nucs2=="T"];
		
		// site quantities for small effect sites
		if(length(small_muts)!=0){
			smallSiteVar = rep(0.0, length(small_muts));
			smallRiskFreq = rep(0.0, length(small_muts));
			smallDerFreq = rep(0.0, length(small_muts));
			smallRiskEffect = rep(0.0, length(small_muts));
			for (i in c(0: (length(small_muts)-1))){
				x = asInteger(p1.individuals.genome1.containsMutations(small_muts[i])) + asInteger(p1.individuals.genome2.containsMutations(small_muts[i]));
				if (small_muts[i].nucleotide == "A") {
					x = 2-x;
				}
				meanx = mean(x);
				num = sum((x-meanx)*(risk - mean(risk)));
				denom = sum( (x-meanx)^2 );
				smallRiskEffect[i] = num/denom;
				smallSiteVar[i] = denom/(N-1);
				smallRiskFreq[i]=meanx/2;
				if (small_muts[i].nucleotide == "A") {
					smallDerFreq[i] = 1 - smallRiskFreq[i];
				} else {
					smallDerFreq[i] = smallRiskFreq[i];
				}
			}
			meanSmallRiskEffect = mean(smallRiskEffect);
			writeFile(DELTARSMALLOUT, paste(meanSmallRiskEffect, sep=","), append=T);
		}
		
		
		// site quantities for large effect sites
		if(length(large_muts)!=0){
			largeSiteVar = rep(0.0, length(large_muts));
			largeRiskFreq = rep(0.0, length(large_muts));
			largeDerFreq = rep(0.0, length(large_muts));
			largeRiskEffect = rep(0.0, length(large_muts));
			for (i in c(0: (length(large_muts)-1))){
				x = asInteger(p1.individuals.genome1.containsMutations(large_muts[i])) + asInteger(p1.individuals.genome2.containsMutations(large_muts[i]));
				if (large_muts[i].nucleotide == "C") {
					x = 2-x;
				}
				meanx = mean(x);
				num = sum((x-meanx)*(risk - mean(risk)));
				denom = sum( (x-meanx)^2 );
				largeRiskEffect[i] = num/denom;
				largeSiteVar[i] = denom/(N-1);
				largeRiskFreq[i]=meanx/2;
				if (large_muts[i].nucleotide == "C") {
					largeDerFreq[i] = 1 - largeRiskFreq[i];
				} else {
					largeDerFreq[i] = largeRiskFreq[i];
				}
			}
			meanLargeRiskEffect = mean(largeRiskEffect);
			writeFile(DELTARLARGEOUT, paste(meanLargeRiskEffect, sep=","), append=T);
		}
		
		
		
		
		// compute things to output		
		mean=mean(genLi);
		smallMeanGenLi = mean(smallGenLi);
		largeMeanGenLi = mean(largeGenLi);
		genVar=var(genLi);
		phenVar=var(inds.tagF);
		h2=genVar/phenVar;
		genVarSmall = var(smallGenLi);
		h2s = genVarSmall/phenVar;
		genVarLarge = var(largeGenLi);
		h2l = genVarLarge/ phenVar;
		prev=sum(inds.tagF>THR)/length(inds.tagF);
		nSegSmall = length(small_muts);
		nSegLarge = length(large_muts);
		
		
		
		writeFile(FIXEDSMALLOUT, paste(fixedSmallGenLi , sep=","), append=T);
		writeFile(FIXEDLARGEOUT, paste(fixedLargeGenLi , sep=","), append=T);
		writeFile(MEANSMALLOUT, paste(smallMeanGenLi , sep=","), append=T);
		writeFile(MEANLARGEOUT, paste(largeMeanGenLi , sep=","), append=T);
		writeFile(MEANOUT, paste(mean, sep=","), append=T);
		writeFile(H2OUT, paste(h2, sep=","), append=T);
		writeFile(H2SOUT, paste(h2s, sep=","), append=T);
		writeFile(H2LOUT, paste(h2l, sep=","), append=T);
		writeFile(PREVOUT, paste(prev, sep=","), append=T);
		writeFile(GENVAROUT, paste(genVar, sep=","), append=T);
		writeFile(NSEGSMALLOUT, paste(nSegSmall, sep=","), append=T);
		writeFile(NSEGLARGEOUT, paste(nSegLarge, sep=","), append=T);
		
		
		
		sim.setValue("cycles", sim.getValue("cycles") +1);
	
	}
	else if ((sim.getValue("cycles") >= CYCLE) | (sim.generation > 10 & TOYRUN == 1))
	{
		sim.simulationFinished();
	}
}

